<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jeremias Yehdegho</title>
    <link>https://qcoh.github.io/</link>
    <description>Recent content on Jeremias Yehdegho</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 May 2019 15:01:47 +0200</lastBuildDate>
    
	<atom:link href="https://qcoh.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Writing a Checker for Clang</title>
      <link>https://qcoh.github.io/blog/writing-a-checker-for-clang/</link>
      <pubDate>Sat, 11 May 2019 15:01:47 +0200</pubDate>
      
      <guid>https://qcoh.github.io/blog/writing-a-checker-for-clang/</guid>
      <description>When writing safety-critical software, people often use languages like Ada, C or C++. The former has an excellent reputation concerning safety, the latter two absolutely do not. In order to make the use of C and C++ safer, people write in restricted subsets of these languages, avoiding dangerous language constructs and features.
One of such language subset is the Autosar coding guidelines for C++14, which are based on earlier coding standards, such as MISRA and the JSF coding standard.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://qcoh.github.io/about/</link>
      <pubDate>Fri, 04 Jan 2019 11:30:33 +0100</pubDate>
      
      <guid>https://qcoh.github.io/about/</guid>
      <description>Hi, thanks for stopping by!
I&amp;rsquo;m Jeremias Yehdegho, a software engineer working in Vienna, Austria. Here you can find some of my projects and articles.
If you have a comment, found an error or want to get in touch, feel free to contact me via Email or Twitter.
Colophon This website is built using hugo and cocoa-hugo-theme.
Imprint Jeremias Yehdegho
Vienna, Austria
Email</description>
    </item>
    
    <item>
      <title>Finding Leaks With Gdb</title>
      <link>https://qcoh.github.io/blog/finding-leaks-with-gdb/</link>
      <pubDate>Fri, 28 Dec 2018 11:24:59 +0100</pubDate>
      
      <guid>https://qcoh.github.io/blog/finding-leaks-with-gdb/</guid>
      <description>Suppose you have in your software objects with specific lifetime requirements, e.g. they must be created during initialization or they must not persist beyond one cycle. Moreover, a violation of these requirements may lead to a crash and you know which object caused the problem but you do not know where it came from.
Debugging might be very difficult if your software is sufficiently large and I&amp;rsquo;d like to share what I did in this situation.</description>
    </item>
    
  </channel>
</rss>